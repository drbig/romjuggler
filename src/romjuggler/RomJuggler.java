package romjuggler;

import java.io.Console;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.PatternSyntaxException;
import javax.swing.JCheckBox;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author drbig
 */
public class RomJuggler extends javax.swing.JFrame {
	private static Console cons = System.console();
	private static String configPath = "romjuggler.cfg";
	
	private Properties config;
	private String[] platforms;
	
	private DefaultTableModel tmGames;
  private RowFilter<DefaultTableModel, Object> rfTitle = null;
  private List<RowFilter<DefaultTableModel,Object>> rfPlatforms = new ArrayList<>();
	
	private Map<String, JCheckBox> hwCB = new HashMap<>();
	
	/**
	 * Creates new form RomJuggler
	 */
	public RomJuggler() {
		// Load config or die
		config = new Properties();
		try {
			config.load(new FileInputStream(configPath));
			platforms = config.getProperty("platforms").split(" ");
		} catch (Exception ex) {
			cons.printf("Error loading config: %s\n", ex.toString());
			System.exit(2);
		}
		
		// Init Games table
		tmGames = new DefaultTableModel(new Object[][]{}, new String[]{
			"Title", "Platform"
		}) {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}

			@Override
			public Class getColumnClass(int column) {
				return String.class;
			}
		};
		
		initComponents();

		// Generate platform selectors
		for (String platform : platforms) {
			JCheckBox cb = new JCheckBox(platform);
			cb.setSelected(true);
			cb.addActionListener(new java.awt.event.ActionListener() {
				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					filtersPlatform();
				}
			});
			jpPlatforms.add(cb);
			hwCB.put(platform, cb);
		}

		// Finalize Games table
		jtGames.getColumnModel().getColumn(0).setPreferredWidth(580);
    jtGames.getColumnModel().getColumn(1).setPreferredWidth(60);
		
		jtGames.getSelectionModel().addListSelectionListener(
        new ListSelectionListener() {
          @Override
          public void valueChanged(ListSelectionEvent e) {
            int row = jtGames.getSelectedRow();

            if (row == -1) {
              jlStatus.setText("Select a game.");
							jbLaunch.setEnabled(false);
            } else {
              jlStatus.setText(String.format("Selected: \"%s\".", jtGames.getValueAt(row, 0)));
							jbLaunch.setEnabled(true);
            }
          }
        }
    );

    gamesScan();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT
	 * modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jlStatus = new javax.swing.JLabel();
    jbLaunch = new javax.swing.JButton();
    jbRescan = new javax.swing.JButton();
    jPanel1 = new javax.swing.JPanel();
    jbClear = new javax.swing.JButton();
    jtfFilter = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    jtGames = new javax.swing.JTable();
    jPanel2 = new javax.swing.JPanel();
    jbInvert = new javax.swing.JButton();
    jpPlatforms = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Rom Juggler");

    jlStatus.setFont(new java.awt.Font("Courier New", 0, 10)); // NOI18N
    jlStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jlStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    jbLaunch.setText("Launch");
    jbLaunch.setEnabled(false);
    jbLaunch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbLaunchActionPerformed(evt);
      }
    });

    jbRescan.setText("Rescan");
    jbRescan.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbRescanActionPerformed(evt);
      }
    });

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filter by title", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Courier New", 0, 10))); // NOI18N

    jbClear.setText("Clear");
    jbClear.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbClearActionPerformed(evt);
      }
    });

    jtfFilter.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        jtfFilterKeyReleased(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addComponent(jtfFilter)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jbClear))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jbClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(jtfFilter)
    );

    jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Games", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Courier New", 0, 10))); // NOI18N

    jtGames.setAutoCreateRowSorter(true);
    jtGames.setModel(tmGames);
    jScrollPane1.setViewportView(jtGames);

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Platforms", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Courier New", 0, 10))); // NOI18N

    jbInvert.setText("Invert");
    jbInvert.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbInvertActionPerformed(evt);
      }
    });

    jpPlatforms.setLayout(new javax.swing.BoxLayout(jpPlatforms, javax.swing.BoxLayout.Y_AXIS));

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jbInvert, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
      .addComponent(jpPlatforms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
        .addComponent(jpPlatforms, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jbInvert))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jlStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
          .addComponent(jbLaunch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jbRescan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jbRescan))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jbLaunch, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jtfFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfFilterKeyReleased
    String pattern = jtfFilter.getText();
	
    try {
      rfTitle = RowFilter.regexFilter("(?i)" + pattern, 0);
    } catch (PatternSyntaxException ex) {
      rfTitle = null;
    }

		filtersUpdate();
  }//GEN-LAST:event_jtfFilterKeyReleased

  private void jbClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbClearActionPerformed
    jtfFilter.setText("");
		rfTitle = null;
		filtersUpdate();
  }//GEN-LAST:event_jbClearActionPerformed

  private void jbInvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInvertActionPerformed
		for (JCheckBox jcb : hwCB.values()) {
			if (jcb.isSelected()) {
				jcb.setSelected(false);
			} else {
				jcb.setSelected(true);
			}
		}

		filtersPlatform();
  }//GEN-LAST:event_jbInvertActionPerformed

  private void jbLaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLaunchActionPerformed
		int row = jtGames.getSelectedRow();
		String name = (String)jtGames.getValueAt(row, 0);
		String key = (String)jtGames.getValueAt(row, 1);
		String folder = config.getProperty(key + "-path");
		String cmd = config.getProperty(key + "-cmd");
		
		File game = new File(folder, name);
		if (game.exists()) {
			try {
				Runtime.getRuntime().exec(new String[] {cmd, game.toString()});
				jlStatus.setText(String.format("Launched %s!", name));
			} catch (Exception ex) {
				jlStatus.setText(String.format("Error launching: %s", ex.toString()));
			}
		} else {
			jlStatus.setText("Couldn't find game file!");
		}
  }//GEN-LAST:event_jbLaunchActionPerformed

  private void jbRescanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRescanActionPerformed
    gamesScan();
  }//GEN-LAST:event_jbRescanActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		if (args.length > 0)
			configPath = args[0];
		
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new RomJuggler().setVisible(true);
			}
		});
	}
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton jbClear;
  private javax.swing.JButton jbInvert;
  private javax.swing.JButton jbLaunch;
  private javax.swing.JButton jbRescan;
  private javax.swing.JLabel jlStatus;
  private javax.swing.JPanel jpPlatforms;
  private javax.swing.JTable jtGames;
  private javax.swing.JTextField jtfFilter;
  // End of variables declaration//GEN-END:variables

	private void filtersUpdate() {
		RowFilter<DefaultTableModel, Object> rfFinal = null;
		List<RowFilter<DefaultTableModel,Object>> rfList = new ArrayList<>();
		TableRowSorter<DefaultTableModel> sorter = (TableRowSorter<DefaultTableModel>)
			jtGames.getRowSorter();
	
		rfList.clear();
		rfList.addAll(rfPlatforms);
		
		if (rfTitle != null)
			rfList.add(rfTitle);

		if (rfList.size() > 0) {
			rfFinal = RowFilter.andFilter(rfList);
		}
	
		sorter.setRowFilter(rfFinal);
  }

	private void filtersPlatform() { 
		rfPlatforms.clear();

    for (JCheckBox jcb : hwCB.values()) {
      if (!jcb.isSelected()) {
        RowFilter<DefaultTableModel, Object> rf;
        try {
          rf = RowFilter.regexFilter("^" + jcb.getText() + "$", 1);
          rfPlatforms.add(RowFilter.notFilter(rf));
        } catch (Exception ex) {
          // shouldn't happen, anyways just skip.
        }
      }
    }

    filtersUpdate();
	}
	
	private void gamesScan() {
    int loaded = 0;

    jlStatus.setText("Scanning games...");
		
		while (tmGames.getRowCount() > 0)
			tmGames.removeRow(0);

    for (String platform : platforms) {
      File root = new File(config.getProperty(platform + "-path"));
      String[] exts = config.getProperty(platform + "-exts").split(" ");

      if (root.exists() && root.isDirectory()) {
        File[] flist = root.listFiles();

        if (flist == null) continue;

        for (File pgame : flist) {
          for (String ext : exts) {
            if (pgame.getName().toLowerCase().endsWith("." + ext)) {
              loaded++;
              tmGames.addRow(new Object[] {pgame.getName(), platform});
              break;
            }
          }
        }
      }
    }

		tmGames.fireTableDataChanged();
    jlStatus.setText(String.format("Loaded %d games.", loaded));
  }
}